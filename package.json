{
  "name": "safe-exec",
  "version": "0.0.1a2",
  "description": "A secure, isolated remote code execution backend with Docker containers, JWT authentication, and multi-language support",
  "main": "dist/index.js",
  "license": "MIT",
  "author": "Vikash Kumar <vikashkrdeveloper@gmail.com>",
  "homepage": "https://github.com/vikashkrdeveloper/SafeExec#readme",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vikashkrdeveloper/SafeExec.git"
  },
  "bugs": {
    "url": "https://github.com/vikashkrdeveloper/SafeExec/issues"
  },
  "keywords": [
    "safe-exec",
    "remote-code-execution",
    "docker",
    "secure",
    "isolated",
    "code-execution",
    "sandbox",
    "api",
    "typescript",
    "nodejs",
    "backend"
  ],
  "scripts": {
    "dev": "ts-node-dev --respawn src/index.ts",
    "build": "rimraf dist && tsc",
    "start": "node dist/index.js",
    "worker": "ts-node src/queue/worker.ts",
    "seed": "ts-node src/utils/seedProblems.ts",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:integration": "jest tests/integration.test.ts",
    "lint": "eslint src tests --ext .ts",
    "lint:fix": "eslint src tests --ext .ts --fix",
    "format": "prettier --write \"src/**/*.ts\" \"tests/**/*.ts\"",
    "format:check": "prettier --check \"src/**/*.ts\" \"tests/**/*.ts\"",
    "clean": "rimraf dist coverage",
    "install:clean": "rm -rf node_modules yarn.lock && yarn install",
    "typecheck": "tsc --noEmit",
    "prepare": "husky install || true",
    "build:executors": "./scripts/build-executors.sh",
    "fix:docker": "./scripts/fix-docker-permissions.sh",
    "ssl:generate": "./scripts/generate-ssl.sh",
    "docker": "echo 'Use yarn docker:dev, yarn docker:test, or yarn docker:prod'",
    "docker:dev": "echo 'üöÄ Starting development environment...' && ENV=development docker compose -f docker-compose.yml up -d",
    "docker:dev:down": "ENV=development docker compose -f docker-compose.yml down",
    "docker:dev:logs": "ENV=development docker compose -f docker-compose.yml logs -f",
    "docker:dev:shell": "ENV=development docker compose -f docker-compose.yml exec rce-api sh",
    "docker:dev:build": "echo 'üèóÔ∏è Building development images...' && DOCKER_HOST= ENV=development docker compose -f docker-compose.yml build",
    "docker:test": "DOCKER_HOST= ENV=test docker compose up -d",
    "docker:test:down": "ENV=test docker compose down",
    "docker:test:run": "ENV=test docker compose run --rm rce-api yarn test",
    "docker:test:coverage": "ENV=test docker compose run --rm rce-api yarn test:coverage",
    "docker:test:integration": "ENV=test docker compose run --rm rce-api yarn test:integration",
    "docker:test:build": "ENV=test docker compose build",
    "docker:prod": "DOCKER_HOST= ENV=production docker compose up -d",
    "docker:prod:down": "ENV=production docker compose down",
    "docker:prod:logs": "ENV=production docker compose logs -f",
    "docker:prod:shell": "ENV=production docker compose exec rce-api sh",
    "docker:prod:build": "ENV=production docker compose build",
    "docker:clean": "docker system prune -f && docker volume prune -f",
    "docker:clean:all": "docker system prune -af && docker volume prune -f",
    "docker:sync": "echo 'üîÑ Syncing code changes to containers...' && docker compose -f docker-compose.yml restart rce-api rce-worker",
    "docker:rebuild": "echo 'üèóÔ∏è Rebuilding and restarting containers...' && yarn docker:dev:build && yarn docker:restart",
    "docker:build:all": "yarn docker:dev:build && yarn docker:test:build && yarn docker:prod:build",
    "docker:setup:dev": "echo 'üöÄ Setting up development environment...' && yarn fix:docker && yarn build:executors && yarn docker:dev:build && yarn docker:dev",
    "docker:setup:test": "yarn build:executors && yarn docker:test:build && yarn docker:test",
    "docker:setup:prod": "yarn build:executors && yarn docker:prod:build && yarn docker:prod",
    "docker:status": "docker ps --format 'table {{.Names}}\\t{{.Status}}\\t{{.Ports}}'",
    "docker:health": "docker compose ps",
    "docker:seed:dev": "ENV=development docker compose exec rce-api yarn seed",
    "docker:seed:test": "ENV=test docker compose run --rm rce-api yarn seed",
    "docker:seed:prod": "ENV=production docker compose exec rce-api yarn seed",
    "docker:restart": "echo 'üîÑ Restarting development environment...' && docker compose -f docker-compose.yml down && ENV=development docker compose -f docker-compose.yml up -d",
    "docker:manage": "echo 'Use yarn docker:dev, yarn docker:test, or yarn docker:prod'",
    "setup": "echo 'üì¶ Installing dependencies and building executors...' && yarn install && yarn fix:docker && yarn build:executors",
    "setup:dev": "echo 'üöÄ Complete development setup...' && yarn setup && yarn docker:setup:dev && yarn docker:seed:dev",
    "path:check": "pwd | grep -q ' ' && echo '‚ö†Ô∏è  Path contains spaces. Hot-reload limited. Use yarn docker:rebuild after changes.' || echo '‚úÖ Path is Docker-compatible'",
    "setup:test": "yarn setup && yarn docker:setup:test && yarn docker:seed:test",
    "setup:prod": "yarn setup && yarn docker:setup:prod",
    "health": "curl -f http://localhost:5000/health || exit 1",
    "logs": "yarn docker:dev:logs",
    "shell": "yarn docker:dev:shell",
    "restart": "yarn docker:restart",
    "reset": "echo 'üßπ Resetting development environment...' && yarn path:check && yarn docker:dev:down && yarn docker:clean && yarn setup:dev"
  },
  "dependencies": {
    "bcrypt": "^5.1.1",
    "bullmq": "^5.56.1",
    "cors": "^2.8.5",
    "dockerode": "^4.0.7",
    "dotenv": "^17.0.1",
    "express": "^5.1.0",
    "express-rate-limit": "^7.4.1",
    "express-validator": "^7.2.1",
    "helmet": "^7.1.0",
    "ioredis": "^5.6.1",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.16.1",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1",
    "uuid": "^11.1.0",
    "winston": "^3.17.0"
  },
  "devDependencies": {
    "@commitlint/cli": "^19.8.1",
    "@commitlint/config-conventional": "^19.8.1",
    "@types/bcrypt": "^5.0.2",
    "@types/cors": "^2.8.17",
    "@types/dockerode": "^3.3.42",
    "@types/express": "^5.0.3",
    "@types/express-validator": "^2.20.33",
    "@types/ioredis": "^5.0.0",
    "@types/jest": "^29.5.12",
    "@types/jsonwebtoken": "^9.0.7",
    "@types/node": "^24.0.14",
    "@types/supertest": "^6.0.2",
    "@types/swagger-jsdoc": "^6.0.4",
    "@types/swagger-ui-express": "^4.1.8",
    "@types/uuid": "^10.0.0",
    "@typescript-eslint/eslint-plugin": "^8.36.0",
    "@typescript-eslint/parser": "^8.36.0",
    "eslint": "^8.57.1",
    "husky": "^9.1.7",
    "jest": "^29.7.0",
    "lint-staged": "^16.1.2",
    "nodemon": "^3.1.10",
    "prettier": "^3.2.5",
    "rimraf": "^6.0.1",
    "supertest": "^7.0.0",
    "ts-jest": "^29.2.5",
    "ts-node": "^10.9.2",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.8.3"
  }
}